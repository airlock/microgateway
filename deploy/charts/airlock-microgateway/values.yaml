# Default values for airlock-microgateway.

## Common parameters

# nameOverride (optional) allows overriding the name to use instead of airlock-microgateway.
nameOverride: "airlock-microgateway"
# fullnameOverride (optional) allows overriding the name to use as full name of resources.
fullnameOverride: ""
# commonLabels specifies the Labels to add to all resources.
commonLabels: {}
# commonAnnotations specifies the Annotations to add to all deployed objects.
commonAnnotations: {}
# imagePullSecrets references one or more secrets to use when pulling images.
imagePullSecrets: []
#   - name: myRegistryKeySecretName

## Operator parameters
operator:
  # replicaCount specifies the desired number of pods for the operator controller
  replicaCount: 1
  # image specifies the Airlock Microgateway Operator image
  image:
    # repository specifies the docker image repository from which to pull
    repository: "docker.io/ergon/airlock-microgateway-operator"
    # tag specifies the image tag to pull
    tag: "4.2.0-alpha1"
    # digest (optional) specifies the sha256 image digest (in the format "sha256:c79ee3f85862fb386e9dd62b901b607161d27807f512d7fbdece05e9ee3d7c63") to pull.
    # Overrides tag when specified.
    digest: "sha256:31718aff66caa388066d128ef19d411e94542806f76d6c3fd4ba15c9a13e6b9b"
    # pullPolicy specifies the image pull policy for the image.
    pullPolicy: IfNotPresent
  # podAnnotations specifies the Annotations to add to all pods.
  podAnnotations: {}
  # podLabels specifies the Labels to add to all pods.
  podLabels: {}
  # serviceAnnotations specifies the Annotations to add to the service.
  serviceAnnotations: {}
  # prometheus.io/scrape: "true"
  # prometheus.io/port: "8080"

  # serviceLabels specifies the Labels to add to the service.
  serviceLabels: {}
  # resources specifies the Deployment's resources.
  resources: {}
  # We recommend at least the following resource specification.
  #  limits:
  #    cpu: 1000m
  #    memory: 512Mi
  #  requests:
  #    cpu: 100m
  #    memory: 512Mi

  # nodeSelector allows setting a custom nodeSelector to define a simple node selection constraint.
  nodeSelector: {}
  # tolerations allows setting custom tolerations to match taints on nodes.
  tolerations: []
  # affinity allows setting a custom affinity to only deploy on specific nodes.
  affinity: {}
  # config specifies the parameters for the operator configuration.
  config:
    # logLevel specifies the application log level.
    logLevel: "info"
  # serviceAccount configures the generation of the service account.
  serviceAccount:
    # create specifies whether a service account should be created.
    create: true
    # annotations specifies the Annotations to add to the service account.
    annotations: {}
    # name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template.
    name: ""
  # rbac configures the generation of role and role binding as well cluster roles and cluster role binding pairs for the above specified service account.
  rbac:
    # create specifies whether to create RBAC resources which are required for the Airlock Microgateway Operator to function.
    create: true
  # serviceMonitor specifies the configuration for the Prometheus Operator ServiceMonitor
  serviceMonitor:
    # create specifies whether to create a ServiceMonitor resource for monitoring.
    create: false
    # labels specifies the Labels to add to the ServiceMonitor.
    labels: {}
    # release: "<prometheus-operator-release>"
## Engine parameters
engine:
  # image specifies the Airlock Microgateway Engine image.
  image:
    # repository specifies the docker image repository from which to pull.
    repository: "docker.io/ergon/airlock-microgateway-engine"
    # tag specifies the image tag to pull.
    tag: "4.2.0-alpha1"
    # digest (optional) specifies the sha256 image digest (in the format "sha256:a3051f42d3013813b05f7513bb86ed6a3209cb3003f1bb2f7b72df249aa544d3") to pull.
    # Overrides tag when specified.
    digest: "sha256:1347635bf7603ff7866978ec2dc0b38f74a9b8d6f33525826d2b7a97916a3367"
    # pullPolicy specifies the image pull policy for the image.
    pullPolicy: IfNotPresent
  # sidecar specifies the configuration when deployed as a sidecar.
  sidecar:
    # podMonitor specifies the configuration for the Prometheus Operator PodMonitor
    podMonitor:
      # create specifies whether to create a PodMonitor resource for monitoring.
      create: false
      # labels specifies the Labels to add to the PodMonitor.
      labels: {}
      # release: "<prometheus-operator-release>"
## NetworkValidator parameters
networkValidator:
  # image specifies the Airlock Microgateway Network Validator image to be injected as an init-container.
  image:
    # repository specifies the docker image repository from which to pull.
    repository: "cgr.dev/chainguard/busybox"
    # tag specifies the image tag to pull.
    tag: ""
    # digest (optional) specifies the sha256 image digest (in the format "sha256:6b3098a1d15817f735f61f56a3416b8592d6abe26648d1d2939ddc0e9e41fcde) to pull.
    # Overrides tag when specified.
    digest: "sha256:6b3098a1d15817f735f61f56a3416b8592d6abe26648d1d2939ddc0e9e41fcde"
    # pullPolicy specifies the image pull policy for the image.
    pullPolicy: IfNotPresent
# mount a secret with an Airlock Microgateway license.
license:
  # name of the secret containing the 'microgateway-license.txt' key
  secretName: "airlock-microgateway-license"
## License Guard parameters
licenseGuard:
  # replicaCount specifies the number of pods to run.
  replicaCount: 2
  # image specifies the Airlock Microgateway License Guard image.
  image:
    # repository specifies the docker image repository from which to pull.
    repository: "docker.io/ergon/airlock-microgateway-license-guard"
    # tag specifies the image tag to pull.
    tag: "4.2.0-alpha1"
    # digest specifies the sha256 image digest (in the format "sha256:a3051f42d3013813b05f7513bb86ed6a3209cb3003f1bb2f7b72df249aa544d3") to pull.
    # An adjustment should generally not be necessary.
    # Overrides tag when specified.
    digest: "sha256:b00b1403cfc6cca4e6e491bba24751166f42283f3a3634f30e586340a854cdd0"
    # pullPolicy specifies the image pull policy for the image.
    pullPolicy: IfNotPresent
  # podAnnotations specifies the Annotations to add to all pods.
  podAnnotations: {}
  # podLabels specifies the Labels to add to all pods.
  podLabels: {}
  # serviceAnnotations specifies the Annotations to add to the service.
  serviceAnnotations: {}
  # prometheus.io/scrape: "true"
  # prometheus.io/port: "9102"

  # serviceLabels specifies the Labels to add to the service.
  serviceLabels: {}
  # resources specifies the Deployment's resources.
  resources: {}
  # We recommend at least the following resource specification.
  # limits:
  #   memory: 64Mi
  # requests:
  #   cpu: 50m
  #   memory: 64Mi

  # nodeSelector allows setting a custom nodeSelector to define a simple node selection constraint.
  nodeSelector: {}
  # tolerations allows setting custom tolerations to match taints on nodes.
  tolerations: []
  # affinity allows setting a custom affinity to only deploy on specific nodes.
  # Specifying a custom affinity will override the pre-configured default.
  affinity: {}
  # serviceMonitor specifies the configuration for the Prometheus Operator ServiceMonitor
  serviceMonitor:
    # create specifies whether to create a ServiceMonitor resource for monitoring.
    create: false
    # labels specifies the Labels to add to the ServiceMonitor.
    labels: {}
    # release: "<prometheus-operator-release>"
## License Guard Redis parameters
licenseGuardRedis:
  # image specifies the Airlock Microgateway License Guard Redis image.
  image:
    # repository specifies the docker image repository from which to pull.
    repository: "cgr.dev/chainguard/redis"
    # tag specifies the image tag to pull.
    tag: ""
    # digest (optional) specifies the sha256 image digest (in the format "sha256:1e6bcfbeede18767941586b8fa609c05d3daf107b8c15a9bcf9fd08e6b7b9f93") to pull.
    # Overrides tag when specified.
    digest: "sha256:1e6bcfbeede18767941586b8fa609c05d3daf107b8c15a9bcf9fd08e6b7b9f93"
    # pullPolicy specifies the image pull policy for the image.
    pullPolicy: IfNotPresent
  # podAnnotations specifies the Annotations to add to all pods.
  podAnnotations: {}
  # podLabels specifies the Labels to add to all pods.
  podLabels: {}
  # serviceAnnotations specifies the Annotations to add to the service.
  serviceAnnotations: {}
  # serviceLabels specifies the Labels to add to the service.
  serviceLabels: {}
  # resources specifies the Deployment's resources.
  resources: {}
  # We recommend at least the following resource specification.
  # limits:
  #   memory: 64Mi
  # requests:
  #   cpu: 100m
  #   memory: 64Mi

  # nodeSelector allows setting a custom nodeSelector to define a simple node selection constraint.
  nodeSelector: {}
  # tolerations allows setting custom tolerations to match taints on nodes.
  tolerations: []
  # affinity allows setting a custom affinity to only deploy on specific nodes.
  affinity: {}
## Check whether the installation of the Airlock Microgateway Helm Chart was successful.
## Requires a secret with a valid Airlock Microgateway license key already to be present.
tests:
  # enabled specifies whether additional resources required for running `helm test` (e.g. Roles and ServiceAccounts) should be created.
  # If set to false, `helm test` will not run any tests.
  enabled: false
