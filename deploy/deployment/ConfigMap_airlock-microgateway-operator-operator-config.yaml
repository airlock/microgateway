apiVersion: v1
data:
  engine_bootstrap_config_template.yaml: |-
    # Base config for a split xDS management server on 18000, admin port on 19000
    admin:
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 19000
    dynamic_resources:
      cds_config:
        initial_fetch_timeout: 10s
        resource_api_version: V3
        api_config_source:
          api_type: GRPC
          transport_api_version: V3
          grpc_services:
          - envoy_grpc:
              cluster_name: xds_cluster
          set_node_on_first_message_only: true
          # Prevent Envoy Node from overloading the xDS server due to rejected configuration when using xDS SotW gRPC
          rate_limit_settings:
            max_tokens: 5
            fill_rate: 0.2
      lds_config:
        resource_api_version: V3
        initial_fetch_timeout: 10s
        api_config_source:
          api_type: GRPC
          transport_api_version: V3
          grpc_services:
          - envoy_grpc:
              cluster_name: xds_cluster
          set_node_on_first_message_only: true
          # Prevent Envoy Node from overloading the xDS server due to rejected configuration when using xDS SotW gRPC
          rate_limit_settings:
            max_tokens: 5
            fill_rate: 0.2
    static_resources:
      listeners:
      - name: probe
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 19001
        filter_chains:
        - filters:
          - name: http_connection_manager
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: http
              codec_type: AUTO
              route_config:
                name: probe
                virtual_hosts:
                - name: probe
                  domains:
                  - '*'
                  routes:
                  - name: ready
                    match:
                      path: /ready
                      headers:
                      - name: ':method'
                        string_match:
                          exact: 'GET'
                          ignore_case: true
                    route:
                      cluster: airlock_microgateway_engine_admin
              http_filters:
              - name: envoy.filters.http.router
                typed_config:
                  '@type': type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      - name: metrics
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 19002
        filter_chains:
          - filters:
              - name: http_connection_manager
                typed_config:
                  '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: http
                  codec_type: AUTO
                  route_config:
                    name: metrics
                    virtual_hosts:
                      - name: metrics
                        domains:
                          - '*'
                        routes:
                          - name: metrics
                            match:
                              path: /metrics
                              headers:
                                - name: ':method'
                                  string_match:
                                    exact: 'GET'
                                    ignore_case: true
                            route:
                              prefix_rewrite: '/stats/prometheus'
                              cluster: airlock_microgateway_engine_admin
                  http_filters:
                    - name: envoy.filters.http.router
                      typed_config:
                        '@type': type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
      - name: xds_cluster
        connect_timeout: 1s
        type: STRICT_DNS
        load_assignment:
          cluster_name: xds_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: airlock-microgateway-operator-xds.$(OPERATOR_NAMESPACE).svc.cluster.local
                    port_value: 13377
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            '@type': type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options:
                connection_keepalive:
                  interval: 360s
                  timeout: 5s
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            '@type': type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                tls_minimum_protocol_version: TLSv1_3
                tls_maximum_protocol_version: TLSv1_3
              validation_context_sds_secret_config:
                name: validation_context_sds
                sds_config:
                  path_config_source:
                    path: /etc/envoy/validation_context_sds_secret.yaml
                    watched_directory:
                      path: /etc/envoy/
              tls_certificate_sds_secret_configs:
                - name: tls_certificate_sds
                  sds_config:
                    path: /etc/envoy/tls_certificate_sds_secret.yaml
      - name: airlock_microgateway_engine_admin
        connect_timeout: 1s
        type: STATIC
        load_assignment:
          cluster_name: airlock_microgateway_engine_admin
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 19000
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            '@type': type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options:
                connection_keepalive:
                  interval: 360s
                  timeout: 5s
  engine_container_template.yaml: |
    name: "$(ENGINE_NAME)"
    image: "$(ENGINE_IMAGE)"
    imagePullPolicy: IfNotPresent
    args:
      - "--config-yaml"
      - "$(BOOTSTRAP_CONFIG)"
      - "--base-id"
      - "$(BASE_ID)"
      - "--drain-time-s"
      - '60'
      - "--service-node"
      - "$(POD_NAME).$(POD_NAMESPACE)"
      - "--service-cluster"
      - "$(APP_NAME).$(POD_NAMESPACE)"
      - "--log-level"
      - "$(LOG_LEVEL)"
      - "--log-format"
      - '{"@timestamp":"%Y-%m-%dT%T.%e%z","log":{"logger":"%n","level":"%l","origin":{"file":{"name":"%g","line":%#},"function":"%!"}},"event":{"module":"envoy","dataset":"envoy.application"},"process":{"pid":%P,"thread":{"id":%t}},"ecs":{"version":"8.5"},"message":"%j"}'
    volumeMounts:
    - name: airlock-microgateway-bootstrap-secret-volume
      mountPath: /etc/envoy
      readOnly: true
    env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
    ports:
      - containerPort: 13378
        name: http
        protocol: TCP
      - containerPort: 19001
        name: probe
        protocol: TCP
      - containerPort: 19002
        name: metrics
        protocol: TCP
    livenessProbe:
      httpGet:
        path: /ready
        port: probe
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 10
      failureThreshold: 3
      successThreshold: 1
      timeoutSeconds: 1
    readinessProbe:
      httpGet:
        path: /ready
        port: probe
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 10
      failureThreshold: 4
      successThreshold: 1
      timeoutSeconds: 1
    securityContext:
      runAsUser: $(SECURITYCONTEXT_UID)
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      privileged: false
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop: ["ALL"]
    resources:
      limits:
        cpu: "2"
        memory: "1Gi"
      requests:
        cpu: "10m"
        memory: "40Mi"
  network_manager_container_template.yaml: |-
    name: "$(NETWORK_MANAGER_NAME)"
    image: "$(NETWORK_MANAGER_IMAGE)"
    imagePullPolicy: IfNotPresent
    args:
      - '--engine-port=13378'
      - '--exclude-inbound-ports=19000,19001,19002,$(EXCLUDE_INBOUND_PORTS)'
      - "--service-mesh=$(SERVICE_MESH)"
      - "--service-mesh-proxy-uid=$(SERVICE_MESH_PROXY_UID)"
      - "--log-level=$(LOG_LEVEL)"
    env:
      - name: IPTABLES
        value: "legacy"
    securityContext:
      privileged: true
      capabilities:
        drop: ["ALL"]
        add:
          - NET_ADMIN
    resources:
      requests:
        cpu: "10m"
        memory: "40Mi"
      limits:
        cpu: "200m"
        memory: "256Mi"
  operator_config.yaml: |
    apiVersion: config.airlock.com/v1alpha1
    kind: OperatorConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    deployment:
      sidecar:
        engineContainerTemplate: "/sidecar/engine_container_template.yaml"
        networkManagerContainerTemplate: "/sidecar/network_manager_container_template.yaml"
    engine:
      bootstrapConfigTemplate: "/engine_bootstrap_config_template.yaml"
    log:
      level: info
    licensing:
      throughputCheckTimeout: 50ms
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: airlock-microgateway-operator
    app.kubernetes.io/version: 4.0.1
  name: airlock-microgateway-operator-operator-config
